<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ens on LearnOverpass</title>
    <link>//osmlab.github.io/learnoverpass/en/</link>
    <description>Recent content in Ens on LearnOverpass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jul 2015 16:35:50 +0800</lastBuildDate>
    <atom:link href="//osmlab.github.io/learnoverpass/en/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Way Node Recursion</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/15/</link>
      <pubDate>Wed, 15 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/15/</guid>
      <description>&lt;p&gt;“Oh! I see that building!” Bob exclaims. “So the ATM is just on the other side, yes?”&lt;/p&gt;

&lt;p&gt;As Bob walked to the building, he realized one important thing - he didn’t know where the entrance is! Looks like we need to write another query for him!&lt;/p&gt;

&lt;p&gt;With the existing query, we’ve successfully found the building, but we need to further locate a specific point - the building’s entrance.&lt;/p&gt;

&lt;p&gt;A building, since it’s generally a polygon when viewed from the map, is defined as a &lt;code&gt;way&lt;/code&gt;. However, an entrance is usually just one point in the map - a point with a specific location. So how do you think they are represented in Overpass? If you’ve guessed by &lt;code&gt;node&lt;/code&gt;s, then you’ve guessed right!&lt;/p&gt;

&lt;p&gt;Remember when I told you that &lt;code&gt;way&lt;/code&gt;s are just defined as an ordered list of nodes? Some of these nodes can be further tagged, taking different values such as entrances. In the next query, we’ll learn how to query for a specific node (an entrance) that is part of a &lt;code&gt;way&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Way Closed Polygon</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/14/</link>
      <pubDate>Tue, 14 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/14/</guid>
      <description>&lt;p&gt;“Hmm, I don’t see it from the observatory, but I do see it from the overpass query map.” says Bob. Indeed, the ATM is on the opposite side of a building (the brownish polygon in the map viewer).&lt;/p&gt;

&lt;p&gt;Let’s go ahead and query for both ATM and the building, so that Bob can have a better idea as to where the ATM is.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Around II</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/13/</link>
      <pubDate>Mon, 13 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/13/</guid>
      <description>&lt;p&gt;“Thanks man!” Bob says as we query for the route back again. He follows it to reach the observatory tower. Once he reached the river bank, he decides to leave his bike and &lt;em&gt;swim&lt;/em&gt; to the observatory!&lt;/p&gt;

&lt;p&gt;After a few minutes, Bob comes back, shivering and wet.&lt;/p&gt;

&lt;p&gt;“Brrrr… water’s cold!” Bob exclaims, when, out of nowhere, the waiter from the restaurant, all in white attire, appareas. He actually followed Bob all this way!&lt;/p&gt;

&lt;p&gt;“Sir” the waiter says, panting “I still need that 25 euroes!”. “Yeah, surely” Bob says as he grabbed his wet wallet from his pocket.&lt;/p&gt;

&lt;p&gt;“Oh” a deadpan expression comes from him. “Sorry, it seemed that I lost all my money swimming back here!”&lt;/p&gt;

&lt;p&gt;Waiter: &lt;em&gt;Facepalm&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Out Modificator Data</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/12/</link>
      <pubDate>Sun, 12 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/12/</guid>
      <description>&lt;p&gt;“Uaaghhh! What happened to my map!” Bob exclaims as he saw the now empty map view.&lt;/p&gt;

&lt;p&gt;So you see, using a bare &lt;code&gt;out&lt;/code&gt; statement produced an empty map.&lt;/p&gt;

&lt;p&gt;See, our &lt;code&gt;out&lt;/code&gt; statement &lt;code&gt;print&lt;/code&gt;s out the data that it receives, that is, if it can. A way only carries a reference to the list of nodes that make up for it - try clicking the ‘data’ button on the top right of the map view. This will show you the raw ‘data’ that overpass returns. Go ahead, try it.&lt;/p&gt;

&lt;p&gt;Ack! It might look a bit complicated, but the basic thing that we have to look into here is that the way, has a list of nodes (nd). So you see, we actually just queried for the &lt;code&gt;way&lt;/code&gt;, specifically, the list of nodes that make it up.&lt;/p&gt;

&lt;p&gt;Let’s change our query back again to see the route.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Out Modificators</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/11/</link>
      <pubDate>Sat, 11 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/11/</guid>
      <description>&lt;p&gt;Incredibly good work!&lt;/p&gt;

&lt;p&gt;“Thanks!” Bob said as he hopped on his bike. “I’ll be following this road to the observatory then!&amp;rdquo;
 
The last couple of exercises introduced quite a few things, namely, &lt;code&gt;way&lt;/code&gt; and the &lt;code&gt;out geom&lt;/code&gt; modificator.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Way&lt;/code&gt; is another OSM element (like &lt;code&gt;node&lt;/code&gt;) that describes a linear feature or area. Just accept that a &lt;code&gt;way&lt;/code&gt; can also define areas for now. The relevant info that we need to learn is that a &lt;code&gt;way&lt;/code&gt; is usually used to define roads, streams and highways, among other things. If you need to query for a route, or something that you think can’t be defined as a single ‘point’, it’s most likely a &lt;code&gt;way&lt;/code&gt; element!&lt;/p&gt;

&lt;p&gt;In OSM, Ways are represented just as a set of points. If you think about it, we can use a couple of points to define a line (which can be used to define routes). &lt;/p&gt;

&lt;p&gt;Since ways are represented internally as just a set of points, a &lt;code&gt;way&lt;/code&gt; is actually just &lt;em&gt;an ordered list of nodes&lt;/em&gt;! Awesome right? Because of this, we can actually query for the individual nodes in a way, though that’s not something we will do for now. &lt;/p&gt;

&lt;p&gt;You might have noticed that we used &lt;code&gt;out geom;&lt;/code&gt; instead of our usual &lt;code&gt;out&lt;/code&gt; statement in our latest query. What’s up with that?&lt;/p&gt;

&lt;p&gt;To understand that, let’s talk about &lt;code&gt;out&lt;/code&gt; first. The &lt;code&gt;out&lt;/code&gt; statement is an called &lt;em&gt;action&lt;/em&gt;, the only &lt;em&gt;action&lt;/em&gt; in the Overpass QL. What it does is to take the input set (the result set/data that preceeds it) and &lt;code&gt;print&lt;/code&gt; it, so we can use the data (which we see in the map viewer).&lt;/p&gt;

&lt;p&gt;So far, we have only used the bare &lt;code&gt;out&lt;/code&gt; statement. What happens if we used &lt;code&gt;out&lt;/code&gt; instead of &lt;code&gt;out geom&lt;/code&gt; in our last query? Let’s try that!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Way By Area</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/10/</link>
      <pubDate>Fri, 10 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/10/</guid>
      <description>&lt;p&gt;“Ahm, Are you sure this is right?” Bob says as he sees the different ways. Uh oh!&lt;/p&gt;

&lt;p&gt;We’ve managed to successfully query for ways of the name “Innstraße”, but unfortunately, it seems that there are actually quite a few ways that are named the same!&lt;/p&gt;

&lt;p&gt;This is obviously unacceptable - Overpass showed us all the ways named “Innstraße” around the world, but we’re only interested in the “Innstraße” near Bob.&lt;/p&gt;

&lt;p&gt;Since we know we Bob is in &lt;em&gt;Passau&lt;/em&gt;, what we can do is to query for the ways that is only in &lt;em&gt;Passau&lt;/em&gt;. Again, we use the &lt;code&gt;area&lt;/code&gt; query to do this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Way Query</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/9/</link>
      <pubDate>Thu, 09 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/9/</guid>
      <description>&lt;p&gt;Bob carefully examines the bike in the parking space, trying to find his bike. “Aha!&amp;rdquo; exclaims Bob, as he grabs the red bike we can only assume is his.&lt;/p&gt;

&lt;p&gt;Now that Bob is on his bike, he now needs to go the observatory to find his wallet. Since we already know Bob has a bad sense of direction (I mean, he did get lost!) it’d be best to show Bob the main road he needs to take to reach the observatory.&lt;/p&gt;

&lt;p&gt;If you look at the map viewer closely, you will see that between the bicycle parking spot and the observatory tower is the main road &amp;ldquo;Innstraße&amp;rdquo;. as the main road Bob needs to take in order to reach the observatory. How can we possibly show this? By using &lt;code&gt;node&lt;/code&gt;, and having &lt;code&gt;[name=&amp;quot;Innstraße&amp;quot;]&lt;/code&gt; as a filter perhaps?&lt;/p&gt;

&lt;p&gt;Not quite. Remember that &lt;code&gt;node&lt;/code&gt;s are &lt;strong&gt;strictly&lt;/strong&gt; for &lt;em&gt;points&lt;/em&gt; of interest. They can’t map roads, as that doesn’t really exist as a single point.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sally Goes to Spain???</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/8/</link>
      <pubDate>Wed, 08 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/8/</guid>
      <description>&lt;p&gt;Huh&amp;hellip; so it looks like CARTO is in Madrid! Sally is very worried that she misread the MeetUp and accidentally went to CARTO Brooklyn instead of CARTO Madrid. But wait! This is where we learn that there are things other than nodes that exist in OpenStreetMap. Obviously, there are polygons and lines! In OSM-speak, these are called &lt;strong&gt;ways&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To be continued&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Donuts to CARTO!</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/7/</link>
      <pubDate>Tue, 07 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/7/</guid>
      <description>&lt;p&gt;Great, you found three cafes! Sally heads into Dunwell Doughnuts to end the rumblings in her stomach.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s recap what we&amp;rsquo;ve learned so far:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Query for nodes (aka points) in areas using both bounding boxes and &lt;code&gt;(around:n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Filter by &lt;code&gt;[key=value]&lt;/code&gt; tags&lt;/li&gt;
&lt;li&gt;Use regular expressions to find non-exact tag values&lt;/li&gt;
&lt;li&gt;Chain together multiple query statements&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Around and Around We Go!</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/6/</link>
      <pubDate>Mon, 06 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/6/</guid>
      <description>&lt;p&gt;Nice! It looks like Sally is standing by the Citibike station outside the Montrose (L) station. Sally is really late for CartoCamp, but now she says she&amp;rsquo;s getting a hungry and could use a snack&amp;hellip; Can you help her find a cafe nearby? She&amp;rsquo;s feeling pretty lazy too, she doesn&amp;rsquo;t want to walk far! What are her options?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Around and Around We Go!</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/5/</link>
      <pubDate>Sun, 05 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/5/</guid>
      <description>&lt;p&gt;Oh no, nothing was found! Is Sally wrong? She says she definitely sees a Citibike station. It turns out that we can&amp;rsquo;t put these filter statements together because we&amp;rsquo;re not looking for a node that is tagged as both a railway station AND a Citibike station. We&amp;rsquo;re looking for a second node that is &lt;strong&gt;around&lt;/strong&gt; the first one. In Overpass, queries are chained together &amp;ndash; output from a first query will flow as input into the next query.&lt;/p&gt;

&lt;p&gt;Before, we queried for nodes in an &lt;em&gt;area&lt;/em&gt; (the bounding box). Now, we&amp;rsquo;re going to look for nodes within a new area &lt;em&gt;around&lt;/em&gt; the two nodes we found. Let&amp;rsquo;s use the Overpass function &lt;strong&gt;around&lt;/strong&gt; to search for Citibike stations nearby Montrose and Morgan.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Around and Around We Go!</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/4/</link>
      <pubDate>Sat, 04 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/4/</guid>
      <description>&lt;p&gt;Great! We&amp;rsquo;ve narrowed it down to two subway stations&amp;ndash; Montrose and Morgan stations. Sally just texted us again and she says she sees a Citibike station nearby. Another clue!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Regex to the Rescue!</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/3/</link>
      <pubDate>Fri, 03 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/3/</guid>
      <description>&lt;p&gt;Okay! We found a few subway stations that Sally might be at. And Sally just remembered that the name of the subway stop started with &amp;ldquo;Mo&amp;hellip;&amp;rdquo; but she can&amp;rsquo;t remember the rest. Oh, Sally! Can we use this information to help figure out which station Sally is at? Let&amp;rsquo;s find names of nodes that start with the letters &amp;ldquo;Mo&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Overpass supports a form of &lt;strong&gt;regular expressions&lt;/strong&gt; that can help us search for non-exact tag values. Let&amp;rsquo;s use &lt;code&gt;~&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt; in a filter statement.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Signal in the Nodes</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/2/</link>
      <pubDate>Thu, 02 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/2/</guid>
      <description>&lt;p&gt;Whoa! That&amp;rsquo;s a lot of nodes. Which one is Sally at? She now says she just exited a subway station&amp;hellip; Click around on the nodes. You&amp;rsquo;ll see that all of them have coordinates, but some have additional information in &lt;strong&gt;tags&lt;/strong&gt;. Let&amp;rsquo;s filter by tags to figure out which subway station Sally might be at.&lt;/p&gt;

&lt;p&gt;Those circles you see in the map view are &amp;ldquo;points of interest&amp;rdquo; called “nodes”. Try clicking on them - some just contain their own positions (lat/lon) but some of them are tagged and contain other data, such as names, type of node, etc, etc.&lt;/p&gt;

&lt;p&gt;Since our friend “Bob” has a pretty inaccurate GPS, he only managed to give us rough coordinates. He DID say that he would be by a tree, however, so why don’t we try searching for a node that’s a tree? He’s bound to be there!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Go to CartoCamp!</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/1/</link>
      <pubDate>Wed, 01 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/1/</guid>
      <description>&lt;p&gt;Welcome to CartoCamp! Today we&amp;rsquo;re going to learn how to use OpenStreetMap&amp;rsquo;s &lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Overpass_API&#34;&gt;Overpass API&lt;/a&gt;. Overpass is an awesome tool for serving up custom selected parts of OSM. This CartoCamp workshop is an introduction to the query language of Overpass and how you can use it to get shapes for your mapping projects!&lt;/p&gt;

&lt;p&gt;On the right is a text editor where you can type in your query commands. See the statement with the words &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt;? Thatâs a query statement which asks the API to output a single point of interest (in OSM-speak, a point is a node).&lt;/p&gt;

&lt;p&gt;The world map below shows the results of your query. You can also toggle the raw data view by clicking the Data button. Right now, the map contains nothing, because our statement is incomplete &amp;ndash; we are asking for a node, but the API doesnât know which node! In fact, there were exactly 3,772,704,127 nodes in OSM when I checked this week at
&lt;a href=&#34;http://www.openstreetmap.org/stats/data_stats.html&#34;&gt;OSM Stats&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>