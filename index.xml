<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LearnOverpass</title>
    <link>//michellemho.github.io/learnoverpass/</link>
    <description>Recent content on LearnOverpass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2015 16:35:50 +0800</lastBuildDate>
    <atom:link href="//michellemho.github.io/learnoverpass/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Challenge Question #2</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/13/</link>
      <pubDate>Mon, 13 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/13/</guid>
      <description>&lt;p&gt;Can you count how many museums there are in New York City per borough?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Challenge Question #1</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/12/</link>
      <pubDate>Sun, 12 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/12/</guid>
      <description>&lt;p&gt;Can you find all the schools and parks in New York City that are within 50 meters of each other?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search Area</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/11/</link>
      <pubDate>Sat, 11 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/11/</guid>
      <description>&lt;p&gt;So there are quite a few Bushwick Avenues in the world. It looks like there&amp;rsquo;s at least three in Long Island and even one in New Jersey. Let&amp;rsquo;s limit the search area to just New York City. Areas are kind of funny in OSM. You can read more about it here: &lt;a href=&#34;http://michellemho.github.io/learnoverpass/en/docs/filters/area/&#34;&gt;http://michellemho.github.io/learnoverpass/en/docs/filters/area/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now, we&amp;rsquo;re going to limit the area search not with a bounding box or an &amp;ldquo;around&amp;rdquo; filter, but with an area filter. First, we need to find areas with the name &amp;ldquo;New York City&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Roads to Nowhere</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/10/</link>
      <pubDate>Fri, 10 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/10/</guid>
      <description>&lt;p&gt;Hooray! You found CARTO Brooklyn!&lt;/p&gt;

&lt;p&gt;It looks like Sally needs to walk down Bushwick Avenue to get here. Let&amp;rsquo;s put that on the Overpass map for her too. You should know all the steps to find and visualize a street (aka way) named &amp;lsquo;Bushwick Avenue&amp;rsquo; by now!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Where is the Way?</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/9/</link>
      <pubDate>Thu, 09 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/9/</guid>
      <description>&lt;p&gt;&amp;ldquo;I still don&amp;rsquo;t know where I need to go!&amp;rdquo; Sally wails. Why is there still no CARTO in Brooklyn? Sally is very sure this building should exist. And so do we because we&amp;rsquo;re sitting inside it right now.&lt;/p&gt;

&lt;p&gt;Check out the &amp;ldquo;Data&amp;rdquo; view of our results right now. We see the three cafe nodes printed out (Dun-Well Doughnuts, Jessie&amp;rsquo;s Bakery, and Bread Brothers). But what about the way? It looks like a list of node ids. We need to change the output method to get these points on the map!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sally Goes to Spain???</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/8/</link>
      <pubDate>Wed, 08 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/8/</guid>
      <description>&lt;p&gt;Huh&amp;hellip; so it looks like CARTO is in Madrid! Sally is very worried that she misread the MeetUp and accidentally went to CARTO Brooklyn instead of CARTO Madrid. But wait! This is where we learn that there are things other than &lt;strong&gt;nodes&lt;/strong&gt; that exist in OpenStreetMap. Obviously, there are polygons and lines too! In OSM-speak, these are called &lt;strong&gt;ways&lt;/strong&gt;. A way is essentially an ordered list of nodes that make up linear features like roads, rivers, etc. A closed way (where the first and last node is the same) is a polygon and can represent building footprints, parks, regions, etc.&lt;/p&gt;

&lt;p&gt;Finally, OSM has &lt;strong&gt;relations&lt;/strong&gt; which is a data structure describing a relationship. For example, if you have a building with a hole in it (like a courtyard), a single &lt;strong&gt;way&lt;/strong&gt; can&amp;rsquo;t represent this. A relation that represents this complex multipolygon needs to be used instead.&lt;/p&gt;

&lt;p&gt;Lucky for us, CARTO Brooklyn is a pretty regular looking rectangular building. Let&amp;rsquo;s look for a &lt;strong&gt;way&lt;/strong&gt; with the name CARTO!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Donuts to CARTO!</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/7/</link>
      <pubDate>Tue, 07 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/7/</guid>
      <description>&lt;p&gt;Great, you found three cafes! Sally heads into Dunwell Doughnuts to end the rumblings in her stomach.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s recap what we&amp;rsquo;ve learned so far:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Query for nodes (aka points) in areas using both bounding boxes and &lt;code&gt;(around:n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Filter by &lt;code&gt;[key=value]&lt;/code&gt; tags&lt;/li&gt;
&lt;li&gt;Use regular expressions to find non-exact tag values&lt;/li&gt;
&lt;li&gt;Chain together multiple query statements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It&amp;rsquo;s now time we figured out where CARTO is!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Around and Around We Go!</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/6/</link>
      <pubDate>Mon, 06 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/6/</guid>
      <description>&lt;p&gt;Nice! It looks like Sally is standing by the Citibike station outside the Montrose (L) station. Sally is really late for CartoCamp, but now she says she&amp;rsquo;s getting a hungry and could use a snack&amp;hellip; Can you help her find a cafe nearby? She&amp;rsquo;s feeling pretty lazy too, she doesn&amp;rsquo;t want to walk far! What are her options?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Around and Around We Go!</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/5/</link>
      <pubDate>Sun, 05 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/5/</guid>
      <description>&lt;p&gt;Oh no, nothing was found! Is Sally wrong? She says she definitely sees a Citibike station. It turns out that we can&amp;rsquo;t put these filter statements together because we&amp;rsquo;re not looking for a node that is tagged as both a railway station AND a Citibike station. We&amp;rsquo;re looking for a second node that is &lt;strong&gt;around&lt;/strong&gt; the first one. In Overpass, queries are chained together &amp;ndash; output from a first query will flow as input into the next query.&lt;/p&gt;

&lt;p&gt;Before, we queried for nodes in an &lt;em&gt;area&lt;/em&gt; (the bounding box). Now, we&amp;rsquo;re going to look for nodes within a new area &lt;em&gt;around&lt;/em&gt; the two nodes we found. Let&amp;rsquo;s use the Overpass function &lt;strong&gt;around&lt;/strong&gt; to search for Citibike stations nearby Montrose and Morgan.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Around and Around We Go!</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/4/</link>
      <pubDate>Sat, 04 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/4/</guid>
      <description>&lt;p&gt;Great! We&amp;rsquo;ve narrowed it down to two subway stations&amp;ndash; Montrose and Morgan stations. Sally just texted us again and she says she sees a Citibike station nearby. Another clue!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Regex to the Rescue!</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/3/</link>
      <pubDate>Fri, 03 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/3/</guid>
      <description>&lt;p&gt;Okay! We found a few subway stations that Sally might be at. And Sally just remembered that the name of the subway stop started with &amp;ldquo;Mo&amp;hellip;&amp;rdquo; but she can&amp;rsquo;t remember the rest. Oh, Sally! Can we use this information to help figure out which station Sally is at? Let&amp;rsquo;s find names of nodes that start with the letters &amp;ldquo;Mo&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Overpass supports a form of &lt;strong&gt;regular expressions&lt;/strong&gt; that can help us search for non-exact tag values. Let&amp;rsquo;s use &lt;code&gt;~&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt; in a filter statement.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Signal in the Nodes</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/2/</link>
      <pubDate>Thu, 02 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/2/</guid>
      <description>&lt;p&gt;Whoa! That&amp;rsquo;s a lot of nodes. Which one is Sally at? She now says she just exited a subway station&amp;hellip; Click around on the nodes. You&amp;rsquo;ll see that all of them have coordinates, but some have additional information in &lt;strong&gt;tags&lt;/strong&gt;. Let&amp;rsquo;s filter by tags to figure out which subway station Sally might be at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Go to CartoCamp!</title>
      <link>//michellemho.github.io/learnoverpass/en/exercises/intro/1/</link>
      <pubDate>Wed, 01 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/exercises/intro/1/</guid>
      <description>&lt;p&gt;Welcome to CartoCamp! Today we&amp;rsquo;re going to learn how to use OpenStreetMap&amp;rsquo;s &lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Overpass_API&#34;&gt;Overpass API&lt;/a&gt;. Overpass is an awesome tool for serving up custom selected parts of OSM. This CartoCamp workshop is an introduction to the query language of Overpass and how you can use it to get shapes for your mapping projects!&lt;/p&gt;

&lt;p&gt;On the right is a text editor where you can type in your query commands. See the statement with the words &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt;? That&amp;rsquo;s a query statement which asks the API to output a single point of interest (in OSM-speak, a point is a node).&lt;/p&gt;

&lt;p&gt;The world map below shows the results of your query. You can also toggle the raw data view by clicking the Data button. Right now, the map contains nothing, because our statement is incomplete &amp;ndash; we are asking for a node, but the API doesnât know which node! In fact, there were exactly 3,772,704,127 nodes in OSM when I checked this week at
&lt;a href=&#34;http://www.openstreetmap.org/stats/data_stats.html&#34;&gt;OSM Stats&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Union</title>
      <link>//michellemho.github.io/learnoverpass/en/docs/block-queries/union/</link>
      <pubDate>Thu, 07 May 2015 11:09:35 +0000</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/docs/block-queries/union/</guid>
      <description>&lt;p&gt;The union block statement is written as a pair of parentheses. Inside the union, any sequence of statements can be placed, including nested union and foreach statements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(statement_1; statement_2; …)[-&amp;gt;.result_set];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It takes no input set. It produces a result set. Its result set is the union of the result sets of all sub-statements, regardless of whether a sub-statement has a redirected result set or not.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(node[name=&amp;quot;Foo&amp;quot;];way[name=&amp;quot;Foo&amp;quot;];);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This collects in the first statement all nodes that have a name tag &amp;ldquo;Foo&amp;rdquo; and in the second statement all ways that have a name tag &amp;ldquo;Foo&amp;rdquo;. After the union statement, the result set is the union of the result sets of both statements.&lt;/p&gt;

&lt;p&gt;The result set of the union statement can be redirected with the usual postfix notation:&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(node[name=&amp;quot;Foo&amp;quot;];way[name=&amp;quot;Foo&amp;quot;];)-&amp;gt;.a;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same as the preceding example, but the result is written into the variable a.&lt;/p&gt;

&lt;p&gt;Note: foreach and print statements cannot be subelement of element union.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;docs-repl&#34;&gt;  &lt;textarea&gt;
(
node
  [amenity=drinking_water]
  (47.06,15.42,47.09,15.48);
node
  [tourism=hotel]
  (47.06,15.42,47.09,15.48);
);
out;
&lt;/textarea&gt;&lt;div class=&#34;docs-repl-result&#34;&gt;  &lt;iframe src=&#34;https://overpass-turbo.eu/master/map.html?Q=%0a%28%0anode%0a%20%20%5bamenity%3ddrinking_water%5d%0a%20%20%2847.06%2c15.42%2c47.09%2c15.48%29%3b%0anode%0a%20%20%5btourism%3dhotel%5d%0a%20%20%2847.06%2c15.42%2c47.09%2c15.48%29%3b%0a%29%3b%0aout%3b%0a&#34;  seamless=&#34;seamless&#34; frameBorder=&#34;0&#34; width=&#34;100%;&#34;&gt;&lt;/iframe&gt;&lt;textarea&gt;&lt;/textarea&gt; &lt;a class=&#34;docs-repl-change-output button&#34; href=&#34;#&#34;&gt;Data&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Difference</title>
      <link>//michellemho.github.io/learnoverpass/en/docs/block-queries/difference/</link>
      <pubDate>Wed, 06 May 2015 11:09:35 +0000</pubDate>
      
      <guid>//michellemho.github.io/learnoverpass/en/docs/block-queries/difference/</guid>
      <description>&lt;p&gt;The difference block statement is written as a pair of parentheses. Inside the difference statement, exactly two statements must be placed, and between them a minus sign.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(statement_1; - statement_2;)[-&amp;gt;.result_set];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It takes no input set. It produces a result set. Its result set contains all elements that are result of the first sub-statement and not contained in the result of the second sub-statement.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(node[name=&amp;quot;Foo&amp;quot;]; - node(50.0,7.0,51.0,8.0););
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This collects all nodes that have a name tag &amp;ldquo;Foo&amp;rdquo; but are not inside the given bounding box.&lt;/p&gt;

&lt;p&gt;The result set of the difference statement can be redirected with the usual postfix notation:&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(node[name=&amp;quot;Foo&amp;quot;]; - node(50.0,7.0,51.0,8.0);)-&amp;gt;.a;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same as the preceding example, but the result is written into the variable a.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;docs-repl&#34;&gt;  &lt;textarea&gt;
(
node[amenity]( 47.06, 15.435,  47.07,  15.44);
-node[amenity](47.064, 15.435, 47.066, 15.44);
);
out;
&lt;/textarea&gt;&lt;div class=&#34;docs-repl-result&#34;&gt;  &lt;iframe src=&#34;https://overpass-turbo.eu/master/map.html?Q=%0a%28%0anode%5bamenity%5d%28%2047.06%2c%2015.435%2c%20%2047.07%2c%20%2015.44%29%3b%0a-node%5bamenity%5d%2847.064%2c%2015.435%2c%2047.066%2c%2015.44%29%3b%0a%29%3b%0aout%3b%0a&#34;  seamless=&#34;seamless&#34; frameBorder=&#34;0&#34; width=&#34;100%;&#34;&gt;&lt;/iframe&gt;&lt;textarea&gt;&lt;/textarea&gt; &lt;a class=&#34;docs-repl-change-output button&#34; href=&#34;#&#34;&gt;Data&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>